Стадия Монтирования
    constructor () {}
    static getDerivedStateFromProps(props, state)
    render
    componentDidMount

Стадия Обновления
    static getDerivedStateFromProps(props, state)
    shouldComponentUpdate(nextProps, nextState)
    getSnapshotBeforeUpdate(prevProps, prevState)
    componentDidUpdate(prevProps, prevState, snapshot)

Стадия Удаления
    componentWillUnmount



// статические методы вызываются без new 
class Foo {
    t() {}
    static getDerivedStateFromProps(props, state)
}

new Foo().t()

Foo.getDerivedStateFromProps()

// Основное отличие в том, что у статического метода нет доступа к This,
// поэтому пропсы и стэйт передаются сверху
// Этот метод вызывается непосредственно перед рендером, в т.ч. и при обновлении

Метод рендер - единственный обязательный метод у классого компонента
Этот метод возвращает реакт элемент (все что после return явл реакт элементом)
Этот метод обычно создается с помощью JSX и указывает что нужно рендерить
DOM узел (div) или пользовательский компонент (<Component />)

Этот метод должен быть чистым (чистая функция - при одних и тех же аргументах, возвращает один и тот же результат)
Вызов побочных эфектов в рендере приводит к ошибкам, к бесконечным обновлениям приложения
никаких эффектов, запросов, вызовов.

 componentDidMount вызывается сразу после монтирования, когда компонент вставился в реальный дом
 вызывается дидмаунт, но он вызывается до того как браузер получает возможность обновить экран
 Дидмаунт это тот метод который необходим для:
 -побочных эффектов
 -запросы
 -подписки
 -таймеры
 -работа с ДОМ
 -слушатели
Так как он вызывается один раз

ОБНОВЛЕНИЕ

shouldComponentUpdate(nextProps, nextState) необходим для оптимизации компонента
чтобы указать компоненту необходимость следующего обновления на основе изменения состояния и пропсов
по умолчанию всегда происходит повторный рендер (при любом изменении состояния или пропсов)
и в большинстве случаев нам это подходит, 
но если вам допустим не нравится (у вас тяжелый компонент, долго обновл и зависает)
Можно взять этот метод, он возвращает булевое значение, если он возвращает false 
ваш компонент прекращает обновлятся
 shouldComponentUpdate(){
    console.log("shouldComponentUpdate")
    return false;
  }
  используется редко, возможно для отладки приложения, сравнивать пропсы.

  getSnapshotBeforeUpdate(prevProps, prevState) в него приходят предыдущие пропсы и состояние
  практически не используется
  вызывается прямо перед добавлением компонента в ДОМ
  позволяет брать некоторую информацию из ДОМ (например положение прокрутки чата) взять старое положение
  и что то сделать с новым.

  componentDidUpdate(prevProps, prevState, snapshot) позволяет делать то же что и дидмаунт и обращаться 
  предыдущему снимку snapshot

   componentWillUnmount вызывается когда компонент удаляется с экрана
   может быть использован для очистки слушателей

   Д/З 

   Ответ робота в эффекте при добавлении сообщений
   Когда вы отправляете сообщение, вам необходимо следить за ними в эффекте
   А в условии посмотреть автора последнего сообщения, если автор последнего user
   запушить последнее с автором bot